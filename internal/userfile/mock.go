// Code generated by MockGen. DO NOT EDIT.
// Source: upfile/internal/userfile (interfaces: UserFileProvider)
//
// Generated by this command:
//
//	mockgen -typed -package userfile -destination ./mock.go . UserFileProvider
//

// Package userfile is a generated GoMock package.
package userfile

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserFileProvider is a mock of UserFileProvider interface.
type MockUserFileProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserFileProviderMockRecorder
	isgomock struct{}
}

// MockUserFileProviderMockRecorder is the mock recorder for MockUserFileProvider.
type MockUserFileProviderMockRecorder struct {
	mock *MockUserFileProvider
}

// NewMockUserFileProvider creates a new mock instance.
func NewMockUserFileProvider(ctrl *gomock.Controller) *MockUserFileProvider {
	mock := &MockUserFileProvider{ctrl: ctrl}
	mock.recorder = &MockUserFileProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFileProvider) EXPECT() *MockUserFileProviderMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockUserFileProvider) ReadFile(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockUserFileProviderMockRecorder) ReadFile(ctx, path any) *MockUserFileProviderReadFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockUserFileProvider)(nil).ReadFile), ctx, path)
	return &MockUserFileProviderReadFileCall{Call: call}
}

// MockUserFileProviderReadFileCall wrap *gomock.Call
type MockUserFileProviderReadFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFileProviderReadFileCall) Return(arg0 string, arg1 error) *MockUserFileProviderReadFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFileProviderReadFileCall) Do(f func(context.Context, string) (string, error)) *MockUserFileProviderReadFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFileProviderReadFileCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockUserFileProviderReadFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
