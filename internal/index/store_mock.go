// Code generated by MockGen. DO NOT EDIT.
// Source: upfile/internal/index (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -typed -package index -destination ./store_mock.go . Store
//

// Package index is a generated GoMock package.
package index

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckEntry mocks base method.
func (m *MockStore) CheckEntry(ctx context.Context, fname, entryDir string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEntry", ctx, fname, entryDir)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEntry indicates an expected call of CheckEntry.
func (mr *MockStoreMockRecorder) CheckEntry(ctx, fname, entryDir any) *MockStoreCheckEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEntry", reflect.TypeOf((*MockStore)(nil).CheckEntry), ctx, fname, entryDir)
	return &MockStoreCheckEntryCall{Call: call}
}

// MockStoreCheckEntryCall wrap *gomock.Call
type MockStoreCheckEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreCheckEntryCall) Return(arg0 bool, arg1 error) *MockStoreCheckEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreCheckEntryCall) Do(f func(context.Context, string, string) (bool, error)) *MockStoreCheckEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreCheckEntryCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockStoreCheckEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUpstream mocks base method.
func (m *MockStore) CheckUpstream(ctx context.Context, fname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpstream", ctx, fname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUpstream indicates an expected call of CheckUpstream.
func (mr *MockStoreMockRecorder) CheckUpstream(ctx, fname any) *MockStoreCheckUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpstream", reflect.TypeOf((*MockStore)(nil).CheckUpstream), ctx, fname)
	return &MockStoreCheckUpstreamCall{Call: call}
}

// MockStoreCheckUpstreamCall wrap *gomock.Call
type MockStoreCheckUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreCheckUpstreamCall) Return(arg0 bool, arg1 error) *MockStoreCheckUpstreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreCheckUpstreamCall) Do(f func(context.Context, string) (bool, error)) *MockStoreCheckUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreCheckUpstreamCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStoreCheckUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(ctx context.Context, fname, entryDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", ctx, fname, entryDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(ctx, fname, entryDir any) *MockStoreCreateEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), ctx, fname, entryDir)
	return &MockStoreCreateEntryCall{Call: call}
}

// MockStoreCreateEntryCall wrap *gomock.Call
type MockStoreCreateEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreCreateEntryCall) Return(arg0 error) *MockStoreCreateEntryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreCreateEntryCall) Do(f func(context.Context, string, string) error) *MockStoreCreateEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreCreateEntryCall) DoAndReturn(f func(context.Context, string, string) error) *MockStoreCreateEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEntry mocks base method.
func (m *MockStore) DeleteEntry(ctx context.Context, fname, entryDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", ctx, fname, entryDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockStoreMockRecorder) DeleteEntry(ctx, fname, entryDir any) *MockStoreDeleteEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockStore)(nil).DeleteEntry), ctx, fname, entryDir)
	return &MockStoreDeleteEntryCall{Call: call}
}

// MockStoreDeleteEntryCall wrap *gomock.Call
type MockStoreDeleteEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreDeleteEntryCall) Return(arg0 error) *MockStoreDeleteEntryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreDeleteEntryCall) Do(f func(context.Context, string, string) error) *MockStoreDeleteEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreDeleteEntryCall) DoAndReturn(f func(context.Context, string, string) error) *MockStoreDeleteEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEntriesByFname mocks base method.
func (m *MockStore) GetEntriesByFname(ctx context.Context, fname string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByFname", ctx, fname)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByFname indicates an expected call of GetEntriesByFname.
func (mr *MockStoreMockRecorder) GetEntriesByFname(ctx, fname any) *MockStoreGetEntriesByFnameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByFname", reflect.TypeOf((*MockStore)(nil).GetEntriesByFname), ctx, fname)
	return &MockStoreGetEntriesByFnameCall{Call: call}
}

// MockStoreGetEntriesByFnameCall wrap *gomock.Call
type MockStoreGetEntriesByFnameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetEntriesByFnameCall) Return(arg0 []string, arg1 error) *MockStoreGetEntriesByFnameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetEntriesByFnameCall) Do(f func(context.Context, string) ([]string, error)) *MockStoreGetEntriesByFnameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetEntriesByFnameCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStoreGetEntriesByFnameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFiles mocks base method.
func (m *MockStore) GetFiles(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockStoreMockRecorder) GetFiles(ctx any) *MockStoreGetFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockStore)(nil).GetFiles), ctx)
	return &MockStoreGetFilesCall{Call: call}
}

// MockStoreGetFilesCall wrap *gomock.Call
type MockStoreGetFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetFilesCall) Return(arg0 []string, arg1 error) *MockStoreGetFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetFilesCall) Do(f func(context.Context) ([]string, error)) *MockStoreGetFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetFilesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStoreGetFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesByEntryDir mocks base method.
func (m *MockStore) GetFilesByEntryDir(ctx context.Context, entryDir string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesByEntryDir", ctx, entryDir)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesByEntryDir indicates an expected call of GetFilesByEntryDir.
func (mr *MockStoreMockRecorder) GetFilesByEntryDir(ctx, entryDir any) *MockStoreGetFilesByEntryDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesByEntryDir", reflect.TypeOf((*MockStore)(nil).GetFilesByEntryDir), ctx, entryDir)
	return &MockStoreGetFilesByEntryDirCall{Call: call}
}

// MockStoreGetFilesByEntryDirCall wrap *gomock.Call
type MockStoreGetFilesByEntryDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetFilesByEntryDirCall) Return(arg0 []string, arg1 error) *MockStoreGetFilesByEntryDirCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetFilesByEntryDirCall) Do(f func(context.Context, string) ([]string, error)) *MockStoreGetFilesByEntryDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetFilesByEntryDirCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStoreGetFilesByEntryDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUpstream mocks base method.
func (m *MockStore) GetUpstream(ctx context.Context, fname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstream", ctx, fname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpstream indicates an expected call of GetUpstream.
func (mr *MockStoreMockRecorder) GetUpstream(ctx, fname any) *MockStoreGetUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstream", reflect.TypeOf((*MockStore)(nil).GetUpstream), ctx, fname)
	return &MockStoreGetUpstreamCall{Call: call}
}

// MockStoreGetUpstreamCall wrap *gomock.Call
type MockStoreGetUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetUpstreamCall) Return(arg0 string, arg1 error) *MockStoreGetUpstreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetUpstreamCall) Do(f func(context.Context, string) (string, error)) *MockStoreGetUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetUpstreamCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStoreGetUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUpstream mocks base method.
func (m *MockStore) SetUpstream(ctx context.Context, fname, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpstream", ctx, fname, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpstream indicates an expected call of SetUpstream.
func (mr *MockStoreMockRecorder) SetUpstream(ctx, fname, value any) *MockStoreSetUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpstream", reflect.TypeOf((*MockStore)(nil).SetUpstream), ctx, fname, value)
	return &MockStoreSetUpstreamCall{Call: call}
}

// MockStoreSetUpstreamCall wrap *gomock.Call
type MockStoreSetUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreSetUpstreamCall) Return(arg0 error) *MockStoreSetUpstreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreSetUpstreamCall) Do(f func(context.Context, string, string) error) *MockStoreSetUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreSetUpstreamCall) DoAndReturn(f func(context.Context, string, string) error) *MockStoreSetUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
