// Code generated by MockGen. DO NOT EDIT.
// Source: upfile/internal/index (interfaces: IndexProvider)
//
// Generated by this command:
//
//	mockgen -typed -package index -destination ./mock.go . IndexProvider
//

// Package index is a generated GoMock package.
package index

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIndexProvider is a mock of IndexProvider interface.
type MockIndexProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIndexProviderMockRecorder
	isgomock struct{}
}

// MockIndexProviderMockRecorder is the mock recorder for MockIndexProvider.
type MockIndexProviderMockRecorder struct {
	mock *MockIndexProvider
}

// NewMockIndexProvider creates a new mock instance.
func NewMockIndexProvider(ctrl *gomock.Controller) *MockIndexProvider {
	mock := &MockIndexProvider{ctrl: ctrl}
	mock.recorder = &MockIndexProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexProvider) EXPECT() *MockIndexProviderMockRecorder {
	return m.recorder
}

// CheckEntry mocks base method.
func (m *MockIndexProvider) CheckEntry(ctx context.Context, fname, entryDir string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEntry", ctx, fname, entryDir)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEntry indicates an expected call of CheckEntry.
func (mr *MockIndexProviderMockRecorder) CheckEntry(ctx, fname, entryDir any) *MockIndexProviderCheckEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEntry", reflect.TypeOf((*MockIndexProvider)(nil).CheckEntry), ctx, fname, entryDir)
	return &MockIndexProviderCheckEntryCall{Call: call}
}

// MockIndexProviderCheckEntryCall wrap *gomock.Call
type MockIndexProviderCheckEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderCheckEntryCall) Return(arg0 bool, arg1 error) *MockIndexProviderCheckEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderCheckEntryCall) Do(f func(context.Context, string, string) (bool, error)) *MockIndexProviderCheckEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderCheckEntryCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockIndexProviderCheckEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUpstream mocks base method.
func (m *MockIndexProvider) CheckUpstream(ctx context.Context, fname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpstream", ctx, fname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUpstream indicates an expected call of CheckUpstream.
func (mr *MockIndexProviderMockRecorder) CheckUpstream(ctx, fname any) *MockIndexProviderCheckUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpstream", reflect.TypeOf((*MockIndexProvider)(nil).CheckUpstream), ctx, fname)
	return &MockIndexProviderCheckUpstreamCall{Call: call}
}

// MockIndexProviderCheckUpstreamCall wrap *gomock.Call
type MockIndexProviderCheckUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderCheckUpstreamCall) Return(arg0 bool, arg1 error) *MockIndexProviderCheckUpstreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderCheckUpstreamCall) Do(f func(context.Context, string) (bool, error)) *MockIndexProviderCheckUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderCheckUpstreamCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockIndexProviderCheckUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateEntry mocks base method.
func (m *MockIndexProvider) CreateEntry(ctx context.Context, fname, entryDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", ctx, fname, entryDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockIndexProviderMockRecorder) CreateEntry(ctx, fname, entryDir any) *MockIndexProviderCreateEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockIndexProvider)(nil).CreateEntry), ctx, fname, entryDir)
	return &MockIndexProviderCreateEntryCall{Call: call}
}

// MockIndexProviderCreateEntryCall wrap *gomock.Call
type MockIndexProviderCreateEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderCreateEntryCall) Return(arg0 error) *MockIndexProviderCreateEntryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderCreateEntryCall) Do(f func(context.Context, string, string) error) *MockIndexProviderCreateEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderCreateEntryCall) DoAndReturn(f func(context.Context, string, string) error) *MockIndexProviderCreateEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEntry mocks base method.
func (m *MockIndexProvider) DeleteEntry(ctx context.Context, fname, entryDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", ctx, fname, entryDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockIndexProviderMockRecorder) DeleteEntry(ctx, fname, entryDir any) *MockIndexProviderDeleteEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockIndexProvider)(nil).DeleteEntry), ctx, fname, entryDir)
	return &MockIndexProviderDeleteEntryCall{Call: call}
}

// MockIndexProviderDeleteEntryCall wrap *gomock.Call
type MockIndexProviderDeleteEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderDeleteEntryCall) Return(arg0 error) *MockIndexProviderDeleteEntryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderDeleteEntryCall) Do(f func(context.Context, string, string) error) *MockIndexProviderDeleteEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderDeleteEntryCall) DoAndReturn(f func(context.Context, string, string) error) *MockIndexProviderDeleteEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUpstream mocks base method.
func (m *MockIndexProvider) DeleteUpstream(ctx context.Context, fname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUpstream", ctx, fname)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUpstream indicates an expected call of DeleteUpstream.
func (mr *MockIndexProviderMockRecorder) DeleteUpstream(ctx, fname any) *MockIndexProviderDeleteUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpstream", reflect.TypeOf((*MockIndexProvider)(nil).DeleteUpstream), ctx, fname)
	return &MockIndexProviderDeleteUpstreamCall{Call: call}
}

// MockIndexProviderDeleteUpstreamCall wrap *gomock.Call
type MockIndexProviderDeleteUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderDeleteUpstreamCall) Return(arg0 error) *MockIndexProviderDeleteUpstreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderDeleteUpstreamCall) Do(f func(context.Context, string) error) *MockIndexProviderDeleteUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderDeleteUpstreamCall) DoAndReturn(f func(context.Context, string) error) *MockIndexProviderDeleteUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEntriesByFname mocks base method.
func (m *MockIndexProvider) GetEntriesByFname(ctx context.Context, fname string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByFname", ctx, fname)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByFname indicates an expected call of GetEntriesByFname.
func (mr *MockIndexProviderMockRecorder) GetEntriesByFname(ctx, fname any) *MockIndexProviderGetEntriesByFnameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByFname", reflect.TypeOf((*MockIndexProvider)(nil).GetEntriesByFname), ctx, fname)
	return &MockIndexProviderGetEntriesByFnameCall{Call: call}
}

// MockIndexProviderGetEntriesByFnameCall wrap *gomock.Call
type MockIndexProviderGetEntriesByFnameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetEntriesByFnameCall) Return(arg0 []string, arg1 error) *MockIndexProviderGetEntriesByFnameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetEntriesByFnameCall) Do(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetEntriesByFnameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetEntriesByFnameCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetEntriesByFnameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFiles mocks base method.
func (m *MockIndexProvider) GetFiles(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockIndexProviderMockRecorder) GetFiles(ctx any) *MockIndexProviderGetFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockIndexProvider)(nil).GetFiles), ctx)
	return &MockIndexProviderGetFilesCall{Call: call}
}

// MockIndexProviderGetFilesCall wrap *gomock.Call
type MockIndexProviderGetFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetFilesCall) Return(arg0 []string, arg1 error) *MockIndexProviderGetFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetFilesCall) Do(f func(context.Context) ([]string, error)) *MockIndexProviderGetFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetFilesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockIndexProviderGetFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesByEntryDir mocks base method.
func (m *MockIndexProvider) GetFilesByEntryDir(ctx context.Context, entryDir string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesByEntryDir", ctx, entryDir)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesByEntryDir indicates an expected call of GetFilesByEntryDir.
func (mr *MockIndexProviderMockRecorder) GetFilesByEntryDir(ctx, entryDir any) *MockIndexProviderGetFilesByEntryDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesByEntryDir", reflect.TypeOf((*MockIndexProvider)(nil).GetFilesByEntryDir), ctx, entryDir)
	return &MockIndexProviderGetFilesByEntryDirCall{Call: call}
}

// MockIndexProviderGetFilesByEntryDirCall wrap *gomock.Call
type MockIndexProviderGetFilesByEntryDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetFilesByEntryDirCall) Return(arg0 []string, arg1 error) *MockIndexProviderGetFilesByEntryDirCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetFilesByEntryDirCall) Do(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetFilesByEntryDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetFilesByEntryDirCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetFilesByEntryDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUpstream mocks base method.
func (m *MockIndexProvider) GetUpstream(ctx context.Context, fname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstream", ctx, fname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpstream indicates an expected call of GetUpstream.
func (mr *MockIndexProviderMockRecorder) GetUpstream(ctx, fname any) *MockIndexProviderGetUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstream", reflect.TypeOf((*MockIndexProvider)(nil).GetUpstream), ctx, fname)
	return &MockIndexProviderGetUpstreamCall{Call: call}
}

// MockIndexProviderGetUpstreamCall wrap *gomock.Call
type MockIndexProviderGetUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetUpstreamCall) Return(arg0 string, arg1 error) *MockIndexProviderGetUpstreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetUpstreamCall) Do(f func(context.Context, string) (string, error)) *MockIndexProviderGetUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetUpstreamCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockIndexProviderGetUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUpstream mocks base method.
func (m *MockIndexProvider) SetUpstream(ctx context.Context, fname, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpstream", ctx, fname, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpstream indicates an expected call of SetUpstream.
func (mr *MockIndexProviderMockRecorder) SetUpstream(ctx, fname, value any) *MockIndexProviderSetUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpstream", reflect.TypeOf((*MockIndexProvider)(nil).SetUpstream), ctx, fname, value)
	return &MockIndexProviderSetUpstreamCall{Call: call}
}

// MockIndexProviderSetUpstreamCall wrap *gomock.Call
type MockIndexProviderSetUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderSetUpstreamCall) Return(arg0 error) *MockIndexProviderSetUpstreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderSetUpstreamCall) Do(f func(context.Context, string, string) error) *MockIndexProviderSetUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderSetUpstreamCall) DoAndReturn(f func(context.Context, string, string) error) *MockIndexProviderSetUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
