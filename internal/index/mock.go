// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/skewb1k/upfile/internal/index (interfaces: IndexProvider)
//
// Generated by this command:
//
//	mockgen -typed -package index -destination ./mock.go . IndexProvider
//

// Package index is a generated GoMock package.
package index

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIndexProvider is a mock of IndexProvider interface.
type MockIndexProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIndexProviderMockRecorder
	isgomock struct{}
}

// MockIndexProviderMockRecorder is the mock recorder for MockIndexProvider.
type MockIndexProviderMockRecorder struct {
	mock *MockIndexProvider
}

// NewMockIndexProvider creates a new mock instance.
func NewMockIndexProvider(ctrl *gomock.Controller) *MockIndexProvider {
	mock := &MockIndexProvider{ctrl: ctrl}
	mock.recorder = &MockIndexProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexProvider) EXPECT() *MockIndexProviderMockRecorder {
	return m.recorder
}

// CheckEntry mocks base method.
func (m *MockIndexProvider) CheckEntry(ctx context.Context, fname, entry string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEntry", ctx, fname, entry)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEntry indicates an expected call of CheckEntry.
func (mr *MockIndexProviderMockRecorder) CheckEntry(ctx, fname, entry any) *MockIndexProviderCheckEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEntry", reflect.TypeOf((*MockIndexProvider)(nil).CheckEntry), ctx, fname, entry)
	return &MockIndexProviderCheckEntryCall{Call: call}
}

// MockIndexProviderCheckEntryCall wrap *gomock.Call
type MockIndexProviderCheckEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderCheckEntryCall) Return(arg0 bool, arg1 error) *MockIndexProviderCheckEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderCheckEntryCall) Do(f func(context.Context, string, string) (bool, error)) *MockIndexProviderCheckEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderCheckEntryCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockIndexProviderCheckEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUpstream mocks base method.
func (m *MockIndexProvider) CheckUpstream(ctx context.Context, fname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpstream", ctx, fname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUpstream indicates an expected call of CheckUpstream.
func (mr *MockIndexProviderMockRecorder) CheckUpstream(ctx, fname any) *MockIndexProviderCheckUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpstream", reflect.TypeOf((*MockIndexProvider)(nil).CheckUpstream), ctx, fname)
	return &MockIndexProviderCheckUpstreamCall{Call: call}
}

// MockIndexProviderCheckUpstreamCall wrap *gomock.Call
type MockIndexProviderCheckUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderCheckUpstreamCall) Return(arg0 bool, arg1 error) *MockIndexProviderCheckUpstreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderCheckUpstreamCall) Do(f func(context.Context, string) (bool, error)) *MockIndexProviderCheckUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderCheckUpstreamCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockIndexProviderCheckUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateEntry mocks base method.
func (m *MockIndexProvider) CreateEntry(ctx context.Context, fname, entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", ctx, fname, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockIndexProviderMockRecorder) CreateEntry(ctx, fname, entry any) *MockIndexProviderCreateEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockIndexProvider)(nil).CreateEntry), ctx, fname, entry)
	return &MockIndexProviderCreateEntryCall{Call: call}
}

// MockIndexProviderCreateEntryCall wrap *gomock.Call
type MockIndexProviderCreateEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderCreateEntryCall) Return(arg0 error) *MockIndexProviderCreateEntryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderCreateEntryCall) Do(f func(context.Context, string, string) error) *MockIndexProviderCreateEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderCreateEntryCall) DoAndReturn(f func(context.Context, string, string) error) *MockIndexProviderCreateEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEntry mocks base method.
func (m *MockIndexProvider) DeleteEntry(ctx context.Context, fname, entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", ctx, fname, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockIndexProviderMockRecorder) DeleteEntry(ctx, fname, entry any) *MockIndexProviderDeleteEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockIndexProvider)(nil).DeleteEntry), ctx, fname, entry)
	return &MockIndexProviderDeleteEntryCall{Call: call}
}

// MockIndexProviderDeleteEntryCall wrap *gomock.Call
type MockIndexProviderDeleteEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderDeleteEntryCall) Return(arg0 error) *MockIndexProviderDeleteEntryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderDeleteEntryCall) Do(f func(context.Context, string, string) error) *MockIndexProviderDeleteEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderDeleteEntryCall) DoAndReturn(f func(context.Context, string, string) error) *MockIndexProviderDeleteEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUpstream mocks base method.
func (m *MockIndexProvider) DeleteUpstream(ctx context.Context, fname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUpstream", ctx, fname)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUpstream indicates an expected call of DeleteUpstream.
func (mr *MockIndexProviderMockRecorder) DeleteUpstream(ctx, fname any) *MockIndexProviderDeleteUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpstream", reflect.TypeOf((*MockIndexProvider)(nil).DeleteUpstream), ctx, fname)
	return &MockIndexProviderDeleteUpstreamCall{Call: call}
}

// MockIndexProviderDeleteUpstreamCall wrap *gomock.Call
type MockIndexProviderDeleteUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderDeleteUpstreamCall) Return(arg0 error) *MockIndexProviderDeleteUpstreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderDeleteUpstreamCall) Do(f func(context.Context, string) error) *MockIndexProviderDeleteUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderDeleteUpstreamCall) DoAndReturn(f func(context.Context, string) error) *MockIndexProviderDeleteUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEntriesByFilename mocks base method.
func (m *MockIndexProvider) GetEntriesByFilename(ctx context.Context, fname string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByFilename", ctx, fname)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByFilename indicates an expected call of GetEntriesByFilename.
func (mr *MockIndexProviderMockRecorder) GetEntriesByFilename(ctx, fname any) *MockIndexProviderGetEntriesByFilenameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByFilename", reflect.TypeOf((*MockIndexProvider)(nil).GetEntriesByFilename), ctx, fname)
	return &MockIndexProviderGetEntriesByFilenameCall{Call: call}
}

// MockIndexProviderGetEntriesByFilenameCall wrap *gomock.Call
type MockIndexProviderGetEntriesByFilenameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetEntriesByFilenameCall) Return(arg0 []string, arg1 error) *MockIndexProviderGetEntriesByFilenameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetEntriesByFilenameCall) Do(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetEntriesByFilenameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetEntriesByFilenameCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetEntriesByFilenameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilenames mocks base method.
func (m *MockIndexProvider) GetFilenames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilenames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilenames indicates an expected call of GetFilenames.
func (mr *MockIndexProviderMockRecorder) GetFilenames(ctx any) *MockIndexProviderGetFilenamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilenames", reflect.TypeOf((*MockIndexProvider)(nil).GetFilenames), ctx)
	return &MockIndexProviderGetFilenamesCall{Call: call}
}

// MockIndexProviderGetFilenamesCall wrap *gomock.Call
type MockIndexProviderGetFilenamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetFilenamesCall) Return(arg0 []string, arg1 error) *MockIndexProviderGetFilenamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetFilenamesCall) Do(f func(context.Context) ([]string, error)) *MockIndexProviderGetFilenamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetFilenamesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockIndexProviderGetFilenamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilenamesByEntry mocks base method.
func (m *MockIndexProvider) GetFilenamesByEntry(ctx context.Context, entry string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilenamesByEntry", ctx, entry)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilenamesByEntry indicates an expected call of GetFilenamesByEntry.
func (mr *MockIndexProviderMockRecorder) GetFilenamesByEntry(ctx, entry any) *MockIndexProviderGetFilenamesByEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilenamesByEntry", reflect.TypeOf((*MockIndexProvider)(nil).GetFilenamesByEntry), ctx, entry)
	return &MockIndexProviderGetFilenamesByEntryCall{Call: call}
}

// MockIndexProviderGetFilenamesByEntryCall wrap *gomock.Call
type MockIndexProviderGetFilenamesByEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetFilenamesByEntryCall) Return(arg0 []string, arg1 error) *MockIndexProviderGetFilenamesByEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetFilenamesByEntryCall) Do(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetFilenamesByEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetFilenamesByEntryCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockIndexProviderGetFilenamesByEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUpstream mocks base method.
func (m *MockIndexProvider) GetUpstream(ctx context.Context, fname string) (Upstream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstream", ctx, fname)
	ret0, _ := ret[0].(Upstream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpstream indicates an expected call of GetUpstream.
func (mr *MockIndexProviderMockRecorder) GetUpstream(ctx, fname any) *MockIndexProviderGetUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstream", reflect.TypeOf((*MockIndexProvider)(nil).GetUpstream), ctx, fname)
	return &MockIndexProviderGetUpstreamCall{Call: call}
}

// MockIndexProviderGetUpstreamCall wrap *gomock.Call
type MockIndexProviderGetUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderGetUpstreamCall) Return(arg0 Upstream, arg1 error) *MockIndexProviderGetUpstreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderGetUpstreamCall) Do(f func(context.Context, string) (Upstream, error)) *MockIndexProviderGetUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderGetUpstreamCall) DoAndReturn(f func(context.Context, string) (Upstream, error)) *MockIndexProviderGetUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUpstream mocks base method.
func (m *MockIndexProvider) SetUpstream(ctx context.Context, fname string, upstream *Upstream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpstream", ctx, fname, upstream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpstream indicates an expected call of SetUpstream.
func (mr *MockIndexProviderMockRecorder) SetUpstream(ctx, fname, upstream any) *MockIndexProviderSetUpstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpstream", reflect.TypeOf((*MockIndexProvider)(nil).SetUpstream), ctx, fname, upstream)
	return &MockIndexProviderSetUpstreamCall{Call: call}
}

// MockIndexProviderSetUpstreamCall wrap *gomock.Call
type MockIndexProviderSetUpstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIndexProviderSetUpstreamCall) Return(arg0 error) *MockIndexProviderSetUpstreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIndexProviderSetUpstreamCall) Do(f func(context.Context, string, *Upstream) error) *MockIndexProviderSetUpstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIndexProviderSetUpstreamCall) DoAndReturn(f func(context.Context, string, *Upstream) error) *MockIndexProviderSetUpstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
